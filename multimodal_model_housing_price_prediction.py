# -*- coding: utf-8 -*-
"""multimodal_model housing price prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DKDjh3fE7DmcOsDl732wOqxrOILSGKeh
"""

import os
import cv2
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error
import tensorflow as tf
from keras.models import Model
from keras.layers import Input, Dense, Concatenate, Flatten, Conv2D, MaxPooling2D
from keras.optimizers import Adam


# Load Tabular Data
df = pd.read_csv('/content/housing.csv')
df.head()
from google.colab import files
uploaded = files.upload()  # Upload 0.jpg, 1.jpg, 2.jpg, etc.


# Load Images and Preprocess
def load_images(image_ids, img_dir='images/', size=(128, 128)):
    images = [] # Initialize images as an empty list
    for id in image_ids:
        path = os.path.join(img_dir, f"{id}.jpg") # Construct image path using id and directory
        img = cv2.imread(path)
        if img is not None:
            img = cv2.resize(img, size)
            images.append(img)
        else:
            print(f"Image not found: {path}")
            # Handle missing images: append a black image of the correct size
            images.append(np.zeros((*size, 3), dtype=np.uint8))
    return np.array(images)

# Split Features
image_ids = df.index.astype(str).values # Use DataFrame index as image IDs and convert to string
X_tab = df[['Avg. Area Number of Bedrooms', 'Avg. Area Number of Rooms', 'Avg. Area Income']].values
y = df['Price'].values
X_img = load_images(image_ids, img_dir='/content/') # Update image directory

# Normalize Tabular Data
scaler = StandardScaler()
X_tab_scaled = scaler.fit_transform(X_tab)

# Train-test Split
X_tab_train, X_tab_test, X_img_train, X_img_test, y_train, y_test = train_test_split(
    X_tab_scaled, X_img, y, test_size=0.2, random_state=42
)

# Build Image Model (CNN)
image_input = Input(shape=(128, 128, 3))
x = Conv2D(32, (3, 3), activation='relu')(image_input)
x = MaxPooling2D((2, 2))(x)
x = Conv2D(64, (3, 3), activation='relu')(x)
x = MaxPooling2D((2, 2))(x)
x = Flatten()(x)
x = Dense(64, activation='relu')(x)
image_features = Dense(32, activation='relu')(x)

# Tabular Model
tabular_input = Input(shape=(X_tab_train.shape[1],))
tabular_features = Dense(32, activation='relu')(tabular_input)

# Combine
combined = Concatenate()([image_features, tabular_features])
x = Dense(64, activation='relu')(combined)
x = Dense(32, activation='relu')(x)
output = Dense(1)(x)

model = Model(inputs=[image_input, tabular_input], outputs=output)
model.compile(optimizer=Adam(0.001), loss='mse')

model.fit([X_img_train, X_tab_train], y_train, epochs=10, batch_size=16, validation_split=0.1)

# Evaluate
y_pred = model.predict([X_img_test, X_tab_test])
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print(f"\nMAE: {mae:.2f}")
print(f"RMSE: {rmse:.2f}")